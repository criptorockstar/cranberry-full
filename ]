"use client";

import React, { useState } from "react";
import { useForm, Controller, SubmitHandler } from "react-hook-form";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/input";
import { Textarea } from "@/components/ui/textarea";
import { Save, Trash2, Star, CirclePlus } from "lucide-react";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"

interface AddProductFormValues {
  name: string;
  description: string;
  images: File[];
  price: number;
  offer: number;
  quantity: "ilimitado" | "limitado";
  stock: number;
}

export default function AddCategory() {
  const router = useRouter();
  const [images, setImages] = useState<File[]>([]);
  const {
    control,
    handleSubmit,
    formState: { errors: formErrors },
    setError,
    clearErrors,
    register,
  } = useForm<AddProductFormValues>({
    defaultValues: {
      name: "",
      description: "",
      images: [],
      price: 0,
      offer: 0,
      quantity: "ilimitado",
      stock: 0,
    },
    mode: "onChange",
  });

  const onSubmit: SubmitHandler<AddProductFormValues> = data => {
    console.log({ ...data, images });
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files = Array.from(e.target.files);
      if (images.length + files.length > 4) {
        alert("Puedes subir un máximo de 4 imágenes.");
        return;
      }
      setImages(prevImages => {
        const newImages = [...prevImages, ...files].slice(0, 4); // Máximo 4 imágenes
        clearErrors("images");
        return newImages;
      });
    }
  };

  return (
    <React.Fragment>
      <div className="p-6">
        <div className="flex flex-row gap-8 h-[88%]">
          <div className="w-full flex-grow">
            <div className="text-2xl">Información</div>
            <div className="mt-3 p-4 bg-white rounded-xl">
              <div className="mb-2">Nombre del artículo</div>

              <Controller
                name="name"
                control={control}
                rules={{
                  required: "* El nombre no puede estar vacío",
                }}
                render={({ field }) => (
                  <Input
                    className="bg-[#f0f0f0]"
                    type="text"
                    placeholder="Artículo"
                    error={formErrors.name ? formErrors.name.message : ""}
                    {...field}
                  />
                )}
              />

              <div className="mt-4">Descripción</div>
              <Controller
                name="description"
                control={control}
                rules={{ required: "* La descripción no puede estar vacía" }}
                render={({ field }) => (
                  <Textarea
                    className="bg-[#f0f0f0]"
                    placeholder="Descripción del artículo"
                    rows={4}
                    {...field}
                    error={formErrors.description ? formErrors.description.message : ""}
                  />
                )}
              />
            </div>

            <div className="mt-6 text-xl">Fotos</div>
            <div className="mt-2 p-4 bg-white rounded-xl flex flex-row">
              <div className="relative h-[150px] w-[150px] border-2 border-dashed border-gray-400 flex items-center justify-center rounded-md cursor-pointer">
                <input
                  name="pictures"
                  type="file"
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                  multiple
                  onChange={handleImageUpload}
                />
                <CirclePlus size={48} className="text-gray-500" />
              </div>

              <div className="mt-0 flex flex-row gap-4 flex-wrap ml-4">
                {images.map((image, index) => (
                  <div key={index} className="relative h-[150px] w-[150px] bg-gray-100 rounded-md overflow-hidden">
                    <img
                      src={URL.createObjectURL(image)}
                      alt="Imagen subida"
                      className="h-full w-full object-cover"
                    />

                    {/* Botón para eliminar la imagen */}
                    <Button
                      size="icon"
                      className="rounded-full absolute inset-0 m-auto bg-white text-red-500"
                      style={{ height: "40px", width: "40px" }}
                      onClick={() => setImages(images.filter((_, i) => i !== index))}
                    >
                      <Trash2 />
                    </Button>
                  </div>
                ))}
              </div>
            </div>

            <div className="mt-6 text-xl">Precios</div>
            <div className="mt-3 p-4 px-8 bg-white rounded-xl">
              <div className="grid grid-cols-2 gap-5">
                <div>
                  <div className="mb-2">Precio</div>
                  <div className="relative">
                    <span className="absolute z-20 left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
                    <Controller
                      name="price"
                      control={control}
                      rules={{
                        required: "* El precio no puede estar vacío",
                      }}
                      render={({ field }) => (
                        <Input
                          className="bg-[#f0f0f0] pl-8" // Dejar espacio para el símbolo de dólar
                          type="text"
                          placeholder="0"
                          error={formErrors.price ? formErrors.price.message : ""}
                          {...field}
                        />
                      )}
                    />
                  </div>
                </div>

                <div>
                  <div className="mb-2">Oferta</div>
                  <div className="relative">
                    <span className="absolute z-20 left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span>
                    <Controller
                      name="offer"
                      control={control}
                      render={({ field }) => (
                        <Input
                          className="bg-[#f0f0f0] pl-8" // Dejar espacio para el símbolo de dólar
                          type="text"
                          placeholder="0"
                          {...field}
                        />
                      )}
                    />
                  </div>
                </div>
              </div>
            </div>

            <div className="mt-6 text-xl">Stock</div>
            <div className="mt-3 p-8 bg-white rounded-xl flex flex-row">
              <Controller
                name="quantity"
                control={control}
                rules={{ required: "* Debes seleccionar una opción de stock" }}
                render={({ field }) => (
                  <RadioGroup
                    onValueChange={field.onChange}
                    value={field.value}
                    className="flex flex-col space-y-2"
                  >
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="ilimitado" id="ilimitado" />
                      <label htmlFor="ilimitado">Ilimitado</label>
                    </div>

                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="limitado" id="limitado" />
                      <label htmlFor="limitado">Limitado</label>
                    </div>
                  </RadioGroup>
                )}
              />
              {formErrors.stock && (
                <p className="text-red-500 text-sm">{formErrors.stock.message}</p>
              )}
              <div className="flex items-center mt-4 ml-8">
                <Controller
                  name="stock"
                  control={control}
                  rules={{
                    required: "* El precio no puede estar vacío",
                  }}
                  render={({ field }) => (
                    <Input
                      className="bg-[#f0f0f0] pl-8"
                      type="text"
                      placeholder="0"
                      error={formErrors.price ? formErrors.price.message : ""}
                      {...field}
                    />
                  )}
                />
                <div className="-mt-7">Unidades</div>
              </div>
            </div>

            <div className="mt-6 text-xl">Categorias</div>
            <div className="mt-3 p-4 bg-white rounded-xl">
              <div className="mb-2">Nombre del artículo</div>

            </div>

            <div className="mt-6 text-xl">Colores</div>
            <div className="mt-3 p-4 bg-white rounded-xl">
              <div className="mb-2">Nombre del artículo</div>

            </div>

            <div className="mt-6 text-xl">Talles</div>
            <div className="mt-3 p-4 bg-white rounded-xl">
              <div className="mb-2">Nombre del artículo</div>

            </div>
          </div>

          <div className="w-[100px]">
            <div className="grid grid-cols-2 fixed">
              <div className="mr-1">
                <Button size="icon" className="bg-[#0a1d35]" onClick={handleSubmit(onSubmit)}>
                  <Save />
                </Button>
              </div>

              <div className="flex flex-col space-y-[5px]">
                <Button size="icon" className="bg-[#0a1d35]">
                  <Trash2 />
                </Button>

                <Button size="icon" className="bg-[#0a1d35]">
                  <Star />
                </Button>
              </div>
            </div>
          </div>

        </div>
      </div>
    </React.Fragment>
  );
}
